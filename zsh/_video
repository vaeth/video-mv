#compdef video videoencode video.mplayer video.mpv video.ffmpeg videoencode.mplayer videoencode.mpv videoencode.ffmpeg
local curcontext="$curcontext" state state_descr line expl
typeset -A opt_args
local args mplayer players prog defpass optmode
mplayer=:
defpass=4
prog=mplayer
players='mpv'
case $service in
(*ff*|*av*)
	prog=ffmpeg
	defpass=2
	mplayer=false;;
(*pv*)
	players='mplayer';;
esac
args=(
'(1 2 -)-\\?[help]'
'-@[Toggle ffmpeg/libav <-> mplayer/mencoder]'
'-v[Toggle TV <-> file input]'
'-f[Force overwrite of existing output file]'
'-p[Print instead of executing]'
'-\#[Skip most sanity checks for the options]'
'-q[quiet]'
'-m+[CONTAINER. Define record container format]:container format:(avi matroska mpeg lavf rawvideo rawaudio)'
'-4+[CODEC.  Set codec format]:codec format:->codec'
'-b+[BITRATE. Set bitrate]:bit rate:(600 700 800 900 1000 1200 1400 1600)'
'-F+[FILTER (Add FILTER to chain)]:video filter; v is yadif+hqdn3d:(yadif "pp=lb" pullup filmdint hqdn3d v)'
'-e+[TIME (Specify end time/size)]:stop time:->stoptime'
'-C+[CROP (horizontally)]:width\:xmin:->horizontal'
'-c+[CROP (vertically)]:height\:ymin:->vertical'
'-w+[CROP (vertically 400+16x)]:height(400+16x)\:ymin:(0 1 2 3 4 5 6 7)'
'-W+[CROP (vertically 400-16x)]:height(400-16x)\:ymin:(0 1 2 3 4)'
'-n[chop right boundary\: as -C 704\:24]'
'-E+[MODE (expand or scale instead of crop)]:expand/scale/crop:(expand scale crop)'
'-A+[WIDTH\[\:HEIGHT\] (change aspect to force WIDTH)]:width\[\:height\] (default is 720\:576 or crop values):->aspect'
'-0[no sound]'
'-1[mono sound]'
'-8+[FREQUENCY (resample)]:resample frequency:(44100 48000)'
'-z[sound\: no alsa]'
'-Z[sound\: alsa]'
'-.[with alsa\: output sound as pcm/raw]'
'-a[lame ABR for sound (better, but incompatible)]'
'-B+[lame bitrate]:lame bitrate:(64 80 128 160)'
'-Q+[lame quality]:lame quality:(0)'
'*-T+[OPT (set title option)]:title option:_title_opt'
)
if $mplayer
then	args+=(
"-N+[use specified player]:player:($players)"
'-M+[use specified mbd value)]:mbd value:->mbd'
'-r[use refinement options (slow)]'
'-R[remove refinement options (fast)]'
)
else	args+=(
'-r+[RUMP (Set prefix for tempfiles)]:prefix for tempfiles:(ffmpeg2pass)'
)
fi
optmode=false
case $service in
(*.options)
	service=${service%.*}
	optmode=:;;
esac
case $service in
(*encod*|*file*|*conv*)
args+=(
'-P+[specify maximal passes \(means 1-pass\)]:maximal pass:(0 4)'
'-O[output intermediate pass files]'
'-t+[use turbomode up to (including) specified pass]:last turbo pass:(1 2 3)'
'-k[keep temporary files even after last pass]'
'-s+[specify start (and end) time]:start time:->starttime'
'-S+[cut off specified nr. of bytes]:byte number to cut'
'-G[start new chunk each GB (incompatible, needed for files >4GB)]'
'-g[no odml headers; opposite of -G (default)]'
'-u[unencoded sound]'
'-l[lame CBR sound (default)]'
'-S+[specifed loudness percentage for sound capturing]:loudness percentage:(90 100)'
)
$optmode || args+=(
'1:passes:->passes'
'2:input file:_files'
'3:output file:_files'
"*:$prog options:"
);;
(*)
args+=(
'-D+[use specified video device]:path to video device:(/dev/video0)'
'-k+[use specified audio device]:path to audio device:(/dev/dsp)'
'-O+[use specifed immediatemode 0 or 1]:immediatemode:(0 1)'
'-t+[used specified audiorate in Hz]:audiorate:(44100 48000)'
'-i+[use specified input device number]:input device number:(0 1 2 3 4 5 6 7 8 9)'
'-I+[use specified input channel; - for none]:input channel:(-)'
'-2[use v4l instead of v4l2]'
'-d+[use specified brightness value]:brightness value:(0 -15 -25)'
'-c+[use specified contrast value]:contrast value:(0)'
'-h+[use specified hue value]:hue value:(0)'
'-s+[use specified saturation value]:saturation value:(0)'
'-G[start new odml chunk each GB (needed for files >4GB) (default)]'
'-g[no odml headers; opposite of -G]'
'-3+[use specified lang channel number 1/2; implies -1)]:language channel:(1 2)'
'-u[unencoded sound (default)]'
'-l[lame CBR sound (not default since too slow with -Q 0)]'
)
$optmode || args+=(
'1:Output file or live display:->livefile'
"*:$prog options:"
);;
esac
_arguments -C -s -S -A '-?*' : $args
local ret=$?
case $state in
(codec)
	local codec
	codec=(
	'mpeg4:MPEG-4 (DivX 4/5)'
	'msmpeg4v2:MS MPEG4v2'
	'h261:H.261'
	'h263:H.263'
	'h263p:H.263+'
	'flv:Sorenson H.263 used in Flash Video'
	'mjpeg:Motion JPEG'
	'msmpeg4:DivX 3'
	'libxvid:Xvid MPEG-4 Part 2 (ASP)'
	'libx264:x264 H.264/AVC MPEG-4 Part 10'
	'libtheora:Theora'
	'svq1:Apple Sorenson Video 1'
	'wmv1:Windows Media Video, version 1 (AKA WMV7)'
	'wmv2:Windows Media Video, version 2 (AKA WMV8)'
	)
	_describe -t codec 'video codec' codec && ret=0;;
(mbd)
	local mbd
	mbd=(
	'0:mplayer default (fast)'
	'1:shortest'
	'2:best quality ratio (recommended)'
	)
	_describe -t mbd 'mbd value' mbd && ret=0;;
(stoptime)
	local stoptime
	stoptime=(
	'01\:00\:00:hh\:mm:\:ss'
	'3600:seconds'
	'10mb:megabytes'
	)
	_describe -t time 'stop time' stoptime && ret=0;;
(starttime)
	local starttime
	starttime=(
	'01\:00\:00:skip first hh\:mm:\:ss'
	'01\:00\:00-01\:00\:01:skip 1 hour, stop 1 second later'
	'3600-7200:start at 3600 seconds, stop at 7200 seconds'
	)
	_describe -t time 'start time' starttime && ret=0;;
(horizontal)
	local crop
	crop=(
	'560:multiple of 16'
	'576:typical value for TV'
	'592:multiple of 16'
	'608:multiple of 16'
	'688:typical value'
	'704:typical value'
	'704\:24:chop right boundary'
	'762\:4:optical max (incompatible\: not multiple of 16)'
	'768\:0:maximal value'
	)
	_describe -t crop 'width:xmin' crop && ret=0;;
(vertical)
	local crop
	crop=(
	'400:typical value'
	'416\:80:typical value'
	'568\:6:optical max (incompatible\: not mltiple of 16)'
	'576\:0:maximal value'
	)
	_describe -t crop 'height:ymin' crop && ret=0;;
(aspect)
	local aspect
	aspect=(
	'1024:typical value'
	'768:typical value'
	'750:sometimes used'
	'733:sometimes used'
	'716:sometimes used'
	'992:seldom used'
	'1000:seldom used'
	'720\:576:default values if crop is not set'
	)
	_describe -t aspect 'width[:height] (default is 720:576 or crop values)' aspect && ret=0;;
(livefile)
	_alternative \
	'Output file:Output file:_files' \
	'live display:live display:(-)' && ret=0;;
(passes)
	local pass=${opt_args[-P]}
	[[ -n $pass ]] || pass=$defpass
	if [[ $pass -le 1 ]]
	then	pass=1
	else	pass=1-$pass
	fi
	_description jobrange expl 'passes'
	compadd "$expl[@]" - - $pass && ret=0;;
esac
return ret
