#!/usr/bin/env sh
# (C) Martin V\"ath <martin@mvath.de>
set -u
. _videoscript.sh

case ${0##*/} in
*t)
	letter=t
	dvbt=:
	dvbc=false;;
*)
	letter=c
	dvbt=false
	dvbc=:;;
esac

CalcChannels() {
	for calcchannelsi in "${channels-}" \
		"$HOME/.${letter}zap/channels.conf" \
		/etc/channels-${letter}zap.conf \
		/etc/channels.conf
	do	test -z "$calcchannelsi" && continue
		channels=$calcchannelsi
		test -r "$channels" && calccannels=$channels && return
	done
}

Usage() {
	CalcChannels || calcchannels="nonreadable $calcchannels"
	if $dvbt
	then	Echo "Usage: ${0##*/} [options] channel [FILE]
If no FILE is given, a random name is chosen; use - to select standard output.
Options:
-f      If FILE exists override it
-q      Quiet"
	else	Echo "Usage: ${0##*/} [options] channel
Sets up /dev/dvb/adapterX/dvr0 for TS recording.
Options:"
	fi
	Echo \
"-r      Set up /dev/dvb/adapterX/dvr0 for TS recording (FILE is ignored)
-p      add pat and pmt to TS recording (implies -r)
-t STOP Stop after given timeout.  STOP is [[hh:]mm:]ss
-e STOP as -t STOP
-s TIME Start at TIME
-c FILE Use FILE (currently: $calcchannels). Fallbacks are:
         ~/.${letter}zap/channels.conf /etc/channels-${letter}zap.conf /etc/channels.conf
-a NUM  Use adaptor NUM
-F NUM  Use frontend NUM
-d NUM  Use demux NUM
-n      Output only command but do not execute something
-T[pPfHsS-] pass option(s) to the title script; - means no title"
	exit ${1:-1}
}

Check() {
	$force || [ -z "${file:++}" ] && return
	if [ "$file" != '-' ] && test -r "$file"
	then	Fatal "$file exists.  Use -f to override"
	fi
}

# Default options

SetDefaults() {
	pass=
	force=false
	stop=
	start=
	titleopt=
	channels=
	adapter=
	frontend=
	demux=
	verbose=:
	showonly=false
	dvb=:
	options='nrpe:t:s:c:a:F:d:T:h?'
	$dvbc || options='qf'$options
	SourceDefaults
}

# Parse options

SetDefaults
while getopts $options opt
do	case $opt in
	n)	showonly=:;;
	q)	verbose=false;;
	r)	pass=r;;
	p)	pass=p;;
	f)	force=:;;
	c)	channels=$OPTARG;;
	F)	frontend=$OPTARG;;
	a)	adapter=$OPTARG;;
	d)	demux=$OPTARG;;
	[te])	stop=$OPTARG;;
	s)	start=$OPTARG;;
	T)	titleopt=$titleopt$OPTARG;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND -1 ))
[ $# -ge 1 ] || Usage
if $dvbt
then	[ $# -le 2 ] || Usage
else	[ $# -le 1 ] || Usage
fi

# Interpret parameters

TitleOpt

case $stop in
*[!:0-9]*)
	Usage;;
esac

CalcChannels || Fatal "cannot read channels file $calcchannels"

fileout=:
random=false
file=
if $dvbt && [ -z "$pass" ]
then	pass=o
	if [ $# -lt 2 ] || [ -z "$2" ]
	then	random=:
	else	file=$2
		Check
		[ "$file" != '-' ] || fileout=false
	fi
fi

$fileout || verbose=false

if [ -n "${stop:++}" ]
then	CalcSeconds stop "$stop"
fi

if [ -n "${start:++}" ]
then	MyExec sleepto ${titleopt:+"-T$titleopt"} "$start" || Exit
fi

if $random
then	file=`mktemp /tmp/${0##*/}.$$XXXXXXXX` && test -r "$file" || \
		Fatal 'mktemp failed'
else	Check
fi

if [ -n "$file" ]
then	text=$file
else	text=/dev/dvb/adapter${adapter:-0}/dvr0
fi

if $fileout
then	Echo "
${0##*/}: $1 -> $text"
	$dvbt || Echo "videoencode.ffmpeg -u c $text filename"
	Echo
	Title "$1->$text"
fi

Push -c args
[ -z "$pass" ] || Push args "-$pass"
[ -z "$file" ] || Push args "$file"
if $dvbt
then	[ -z "$stop" ] || Push args '-t' "$stop"
fi
[ -z "$channels" ] || Push args '-c' "$channels"
[ -z "$adapter" ]  || Push args '-a' "$adapter"
[ -z "$frontend" ] || Push args '-f' "$frontend"
[ -z "$demux" ] || Push args '-d' "$demux"

if $dvbt || [ -z "$stop" ]
then	eval MyExec ${letter}zap $args -- "\$1"
	Exit
fi
eval set -- ${letter}zap $args -- "\$1"
Push -c myexec "$@"
Echo "$myexec"
! $showonly || exit 0
"$@" &
killme=$!
trapret=130
KillTrap() {
	trap : EXIT HUP INT TERM
	[ -z "$killme" ] || kill "$killme"
	killme=
	trap - EXIT HUP INT TERM
	exit $trapret
}
trap KillTrap EXIT HUP INT TERM
sleep "$stop"
trapret=0
KillTrap
