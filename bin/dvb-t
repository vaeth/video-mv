#!/usr/bin/env sh
# (C) Martin V\"ath <martin at mvath.de>
# SPDX-License-Identifier: BSD-3-Clause
set -u
. _videoscript.sh

case ${0##*/} in
*t)
	letter=t
	capletter=T
	poorman=false
	dvbt=:
	dvbc=false;;
*)
	letter=c
	capletter=C
	poorman=
	dvbt=false
	dvbc=:;;
esac

CalcChannels() {
	for calcchannelsi in "${channels-}" \
		"$HOME/.${letter}zap/channels.conf" \
		/etc/channels-${letter}zap.conf \
		/etc/channels.conf
	do	test -z "$calcchannelsi" && continue
		channels=$calcchannelsi
		test -r "$channels" && calcchannels=$channels && return
	done
	return 1
}

LdPreload() {
	$ld_preload || return 0
	case ${LD_PRELOAD-} in
	*/libmediaclient.so)
		return 0;;
	esac
	! test -r /etc/ld.so.preload || \
		! grep -q /libmediaclient.so /etc/ld.so.preload >/dev/null 2>&1 \
		|| return 0
	ldpreload=
	ldpreload=`PATH="${PATH:-}${PATH:+:}/sbin" ldconfig -p 2>&1 | sed -ne 's/^[[:space:]]*libmediaclient.so .* => //p'`
	[ -n "$ldpreload" ] && test -x "$ldpreload" || return 0
	if [ -n "${LD_PRELOAD:++}" ]
	then	LD_PRELOAD=$ldpreload' '$LD_PRELOAD
		Echo "LD_PRELOAD='$LD_PRELOAD'"
	else	LD_PRELOAD=$ldpreload
		export LD_PRELOAD
		Echo "LD_PRELOAD='$LD_PRELOAD'
export LD_PRELOAD"
	fi
}

PreCmd() {
	eval set -- 1 $precmd
	shift
	for precmdi
	do	eval MyExec "$precmdi"
	done
}

Usage() {
	CalcChannels || calcchannels="nonreadable ${channels-}"
	msgignore=
	$poorman || msgignore=' (FILE is ignored)'
	Echo \
"Usage: ${0##*/} [options] channel [FILE]
Record from TV to FILE; if channel is '-' quit after honouring options"
	if ! $poorman
	then	Echo \
"If no FILE is given, a random name is chosen."
	else	Echo \
"If no FILE is given, only set up /dev/dvb/adapterX/dvr0 for TS recording."
	fi
	Echo \
"If reasonable, /usr/lib{64,}/libmediaclient.so is prepended to LD_PRELOAD
which may be useful for sundtek drivers.
Options:
-P      poor man mode: Assume that tzap/czap does not support options -o/-t
        (use -P with czap unless you have a patched version of czap).
-f      If FILE exists override it
-r      Set up /dev/dvb/adapterX/dvr0 for TS recording$msgignore
-p      add pat and pmt to TS recording (implies -r)
-e LEN  Stop after given timeout.  LEN is [[hh:]mm:]ss
-t LEN  as -e LEN
-s TIME Start at TIME. Examples for TIME:
        now
        23:59
        23:59:59 31 Dec 2012 (do not forget quoting from the shell)
-c FILE Use FILE (currently: $calcchannels). Fallbacks are:
         ~/.${letter}zap/channels.conf /etc/channels-${letter}zap.conf /etc/channels.conf
-a NUM  Use adaptor NUM
-F NUM  Use frontend NUM
-d NUM  Use demux NUM
-n      Output only commands but do not execute anything
-q      Quiet
-C CMD  (accumulatively) eval CMD in advance (at start time)
-M      As -C 'mediaclient --setdtvmode=DVB$capletter' (for sundtek)
-L      Do not try to extend LD_PRELOAD for sundtek
-T[pPfHsS-] pass option(s) to the title script; - means no title"
	exit ${1:-1}
}

Check() {
	$force || [ -z "${file:++}" ] && return
	if test -r "$file"
	then	Fatal "$file exists.  Use -f to override"
	fi
}

# Default options

SetDefaults() {
	pass=
	force=false
	stop=
	start=
	titleopt=
	channels=
	adapter=
	frontend=
	demux=
	verbose=:
	showonly=false
	ld_preload=:
	dvb=:
	Push -c precmd
	SourceDefaults
	SetPoorman
}

SetPoorman() {
	[ -z "${poorman:++}" ] || return 0
	if ${letter}zap -h 2>&1 | grep -q -- -o >/dev/null 2>&1
	then	poorman=false
	else	poorman=:
	fi
}

GetTime() {
	gettime=`date +%s` && IsNonzeroNumber "${gettime:-+}" \
		|| Fatal 'date command did not work'
	eval $1=\$gettime
}

TimeStart() {
	filenumber=
	[ -n "${file:++}" ] && [ -n "${stop:++}" ] || return 0
	recordstop=$stop
	GetTime recordstart
}

TimeReached() {
	! $showonly && [ -n "${file:++}" ] || return 0
	[ -n "${filenumber:++}" ] || test -f "$file" || return 0
	if [ -n "${stop:++}" ]
	then	GetTime currenttime
		stop=$(( $recordstop + $recordstart - $currenttime ))
		[ "$stop" -gt 5 ] || return 0
	fi
	while test -f "$file"
	do	if [ -z "$filenumber" ]
		then	filenumber=1
			filerump=${file%.*}
			fileext=.${file##*.}
			case $fileext in
			*/*|".$file")
				filerump=$file
				fileext=;;
			esac
		else	filenumber=$(( $filenumber + 1 ))
		fi
		file=`printf '%s_%02d%s' "$filerump" "$filenumber" "$fileext"`
	done
	return 1
}

unset killzap
unset killcat
KillZapCat() {
	trap : EXIT HUP INT TERM
	if [ -n "${killzap++}" ]
	then	$verbose || $showonly && Echo 'kill $killzap'
		$showonly || [ -z "$killzap" ] || kill "$killzap"
		MyExec unset killzap
		[ -z "${killcat++}" ] || MyExec sleep 5
	fi
	if [ -n "${killcat++}" ]
	then	$verbose || $showonly && Echo 'kill $killcat'
		$showonly || [ -z "$killcat" ] || kill "$killcat"
		MyExec unset killcat
	fi
}

trapret=130
KillTrap() {
	KillZapCat
	trap - EXIT HUP INT TERM
	exit $trapret
}

SetTrap() {
	trap KillTrap EXIT HUP INT TERM
}

# Parse options

SetDefaults
while getopts 'PnqfrpLMC:e:t:s:c:a:F:d:T:h' opt
do	case $opt in
	P)	poorman=:;;
	n)	showonly=:;;
	q)	verbose=false;;
	r)	pass=r;;
	p)	pass=p;;
	f)	force=:;;
	L)	ld_preload=false;;
	M)	Push precmd "mediaclient --setdtvmode=DVB$capletter";;
	C)	Push precmd "$OPTARG";;
	c)	channels=$OPTARG;;
	F)	frontend=$OPTARG;;
	a)	adapter=$OPTARG;;
	d)	demux=$OPTARG;;
	[te])	stop=$OPTARG;;
	s)	start=$OPTARG;;
	T)	titleopt=$titleopt$OPTARG;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND -1 ))
[ $# -ge 1 ] || Usage
channelname=$1
shift
if ! $poorman
then	[ $# -le 1 ] || Usage
fi

# Interpret parameters

TitleOpt

case $stop in
*[!:0-9]*)
	Usage;;
esac

CalcChannels || Fatal "cannot read channels file ${channels-}"

ignorefile=false
random=false
file=
if ! $poorman
then	if [ -z "$pass" ]
	then	random=:
	else	ignorefile=:
	fi
fi
if [ $# -ge 1 ]
then	file=${1:-empty.avi}
	shift
	random=false
	$ignorefile || Check
fi

if [ -n "${stop:++}" ]
then	CalcSeconds stop "$stop"
fi

if [ -n "${start:++}" ]
then	MyExec sleepto ${titleopt:+"-T$titleopt"} "$start" || Exit
fi

LdPreload
PreCmd
[ "$channelname" != '-' ] || Exit

if $random
then	file=`umask 077 && mktemp -- ${TMPDIR:-/tmp}/${0##*/}.$$XXXXXXXX` \
		&& [ -n "${file:++}" ] && test -r "$file" \
		|| Fatal 'mktemp failed'
else	Check
fi

adapterdev=/dev/dvb/adapter${adapter:-0}/dvr0
if [ -n "$file" ]
then	text=$file
else	text=$adapterdev
fi

if $verbose && ! $showonly
then	Echo "
${0##*/}: $channelname -> $text
"
	if $poorman && [ -z "$file" ] || {
		! $poorman && [ -n "$pass" ]
	}
	then	Push -c toprint "$adapterdev"
		Echo \
"# You will have to use one of the following commands or something similar
#	cat $toprint >filename.avi
#	videoencode.ffmpeg -u c $toprint filename.avi
#	videoencode.mplayer - $toprint
#	video.mplayer - $toprint
"
	fi
	Title "$channelname->${text##*/}"
fi

Push -c mycmd ${letter}zap
[ -z "$pass" ] || Push mycmd "-$pass"
[ -z "$channels" ] || Push mycmd -c "$channels"
[ -z "$adapter" ]  || Push mycmd -a "$adapter"
[ -z "$frontend" ] || Push mycmd -f "$frontend"
[ -z "$demux" ]    || Push mycmd -d "$demux"
TimeStart
if ! $poorman || [ -z "${stop:++}${file:++}" ]
then	while :
	do	Push -c filetime
		if ! $poorman
		then	[ -z "$file" ] || Push filetime '-o' "$file"
			[ -z "$stop" ] || Push filetime '-t' "$stop"
		fi
		if [ -z "${file:++}" ]
		then	eval MyExec $mycmd $filetime -- "$channelname"
			trapret=$?
		else	SetTrap
			eval MyExecBg killzap $mycmd $filetime -- "$channelname"
			if $showonly
			then	trapret=0
				Echo 'wait $killzap'
			else	sleep 30
				if test -s "$file"
				then	! $verbose || Echo 'wait $killzap'
					wait $killzap
					trapret=$?
					unset killzap
				else	sleep 5
					PreCmd
					trapret=1
				fi
			fi
		fi
		if TimeReached
		then	KillTrap
		fi
		KillZapCat
	done
fi
Push mycmd -- "$channelname"


while :
do	SetTrap
	if ! $showonly && [ -n "${file:++}${stop:++}" ]
	then	if [ -n "${stop:++}" ]
		then	sleep "$stop" &
			killsleep=$!
		else	sleep 2147483647 &
			killsleep=$!
		fi
	fi
	if [ -n "$file" ]
	then	if $force
		then	set +C >/dev/null 2>&1
		else	set -C >/dev/null 2>&1
		fi
		if $verbose || $showonly
		then	Push -c toprintA cat -- "$adapterdev"
			Push -c toprintB "$file"
			Echo "$toprintA >$toprintB "'&
killcat=$!'
			killcat=
		fi
		if ! $showonly
		then	{
				cat -- "$adapterdev" >|"$file"
				kill $killsleep
			} &
			killcat=$!
		fi
	elif [ -z "${stop:++}" ]
	then	eval MyExec $mycmd
		trapret=$?
		KillTrap
	fi
	if $verbose || $showonly
	then	Echo "$mycmd"' &
killzap=$!'
		killzap=
	fi
	if ! $showonly
	then	eval set -- a $mycmd
		shift
		"$@" &
		killzap=$!
	fi
	if $verbose || $showonly && [ -n "${stop:++}" ]
	then	Echo "sleep $stop"
	fi
	if ! $showonly
	then	sleep 30
		if [ -z "${file:++}" ] || test -s "$file"
		then	wait $killsleep
		else	sleep 5
			PreCmd
		fi
	fi
	if TimeReached
	then	trapret=0
		KillTrap
	fi
	KillZapCat
done
