#!/usr/bin/env sh
# (C) Martin V\"ath <martin@mvath.de>
set -u
. _videoscript.sh

case ${0##*/} in
*t)
	letter=t
	dvbt=:
	dvbc=false;;
*)
	letter=c
	dvbt=false
	dvbc=:;;
esac

CalcChannels() {
	for calcchannelsi in "${channels-}" \
		"$HOME/.${letter}zap/channels.conf" \
		/etc/channels-${letter}zap.conf \
		/etc/channels.conf
	do	test -z "$calcchannelsi" && continue
		channels=$calcchannelsi
		test -r "$channels" && calcchannels=$channels && return
	done
}

Usage() {
	CalcChannels || calcchannels="nonreadable $calcchannels"
	msgignore=
	$dvbc || msgignore=' (FILE is ignored)'
	Echo \
"Usage: ${0##*/} [options] channel [FILE]"
	if $dvbt
	then	Echo \
"If no FILE is given, a random name is chosen."
	else	Echo \
"Usage: ${0##*/} [options] channel [FILE]
If no FILE is given, only set up /dev/dvb/adapterX/dvr0 for TS recording."
	fi
	Echo \
"Options:
-f      If FILE exists override it
-r      Set up /dev/dvb/adapterX/dvr0 for TS recording$msgignore
-p      add pat and pmt to TS recording (implies -r)
-t STOP Stop after given timeout.  STOP is [[hh:]mm:]ss
-e STOP as -t STOP
-s TIME Start at TIME
-c FILE Use FILE (currently: $calcchannels). Fallbacks are:
         ~/.${letter}zap/channels.conf /etc/channels-${letter}zap.conf /etc/channels.conf
-a NUM  Use adaptor NUM
-F NUM  Use frontend NUM
-d NUM  Use demux NUM
-n      Output only commands but do not execute anything
-q      Quiet
-T[pPfHsS-] pass option(s) to the title script; - means no title"
	exit ${1:-1}
}

Check() {
	$force || [ -z "${file:++}" ] && return
	if test -r "$file"
	then	Fatal "$file exists.  Use -f to override"
	fi
}

# Default options

SetDefaults() {
	pass=
	force=false
	stop=
	start=
	titleopt=
	channels=
	adapter=
	frontend=
	demux=
	verbose=:
	showonly=false
	dvb=:
	SourceDefaults
}

# Parse options

SetDefaults
while getopts 'nqfrpe:t:s:c:a:F:d:T:h?' opt
do	case $opt in
	n)	showonly=:;;
	q)	verbose=false;;
	r)	pass=r;;
	p)	pass=p;;
	f)	force=:;;
	c)	channels=$OPTARG;;
	F)	frontend=$OPTARG;;
	a)	adapter=$OPTARG;;
	d)	demux=$OPTARG;;
	[te])	stop=$OPTARG;;
	s)	start=$OPTARG;;
	T)	titleopt=$titleopt$OPTARG;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND -1 ))
[ $# -ge 1 ] || Usage
channelname=$1
shift
if $dvbt
then	[ $# -le 1 ] || Usage
fi

# Interpret parameters

TitleOpt

case $stop in
*[!:0-9]*)
	Usage;;
esac

CalcChannels || Fatal "cannot read channels file $calcchannels"

ignorefile=false
random=false
file=
if $dvbt
then	if [ -z "$pass" ]
	then	pass=o
		random=:
	else	ignorefile=:
	fi
fi
if [ $# -ge 1 ]
then	file=${1:-empty.avi}
	shift
	random=false
	$ignorefile || Check
fi

if [ -n "${stop:++}" ]
then	CalcSeconds stop "$stop"
fi

if [ -n "${start:++}" ]
then	MyExec sleepto ${titleopt:+"-T$titleopt"} "$start" || Exit
fi

if $random
then	file=`umask 077 && mktemp -- ${TMPDIR:-/tmp}/${0##*/}.$$XXXXXXXX` \
		&& [ -n "${file:++}" ] && test -r "$file" \
		|| Fatal 'mktemp failed'
else	Check
fi

adapterdev=/dev/dvb/adapter${adapter:-0}/dvr0
if [ -n "$file" ]
then	text=$file
else	text=$adapterdev
fi

if $verbose && ! $showonly
then	Echo "
${0##*/}: $channelname -> $text
"
	if $dvbc && [ -z "$file" ] || {
		$dvbt && [ x"$pass" != x'o' ]
	}
	then	Push -c toprint "$adapterdev"
		Echo \
"# You will have to use one of the following commands or something similar
#	cat $toprint >filename.avi
#	videoencode.ffmpeg -u c $toprint filename.avi
#	videoencode.mplayer - $toprint
#	video.mplayer - $toprint
"
	fi
	Title "$channelname->${text##*/}"
fi

Push -c mycmd ${letter}zap
[ -z "$pass" ] || Push mycmd "-$pass"
if $dvbt
then	[ -z "$file" ] || Push mycmd "$file"
	[ -z "$stop" ] || Push mycmd '-t' "$stop"
fi
[ -z "$channels" ] || Push mycmd -c "$channels"
[ -z "$adapter" ]  || Push mycmd -a "$adapter"
[ -z "$frontend" ] || Push mycmd -f "$frontend"
[ -z "$demux" ]    || Push mycmd -d "$demux"

Push mycmd -- "$channelname"
if $dvbt || [ -z "${stop:++}${file:++}" ]
then	eval MyExec $mycmd
	Exit
fi

trapret=130
unset killzap
unset killcat
KillTrap() {
	trap : EXIT HUP INT TERM
	if [ -n "${killzap++}" ]
	then	$verbose || $showonly && Echo 'kill $killzap'
		$showonly || [ -z "$killzap" ] || kill "$killzap"
		MyExec unset killzap
		[ -z "${killcat++}" ] || MyExec sleep 5
	fi
	if [ -n "${killcat++}" ]
	then	$verbose || $showonly && Echo 'kill $killcat'
		$showonly || [ -z "$killcat" ] || kill "$killcat"
		MyExec unset killcat
	fi
	trap - EXIT HUP INT TERM
	exit $trapret
}
trap KillTrap EXIT HUP INT TERM

if [ -n "$file" ]
then	if $force
	then	set +C >/dev/null 2>&1
	else	set -C >/dev/null 2>&1
	fi
	if $verbose || $showonly
	then	Push -c toprintA cat -- "$adapterdev"
		Push -c toprintB "$file"
		Echo "$toprintA >$toprintB"' &
killcat=$!'
		killcat=
	fi
	if ! $showonly
	then	cat -- "$adapterdev" >"$file" &
		killcat=$!
	fi
fi
if [ -z "$stop" ]
then	eval MyExec $mycmd
	trapret=$?
	KillTrap
fi
if $verbose || $showonly
then	Echo "$mycmd"' &
killzap=$!'
	killzap=
fi
if ! $showonly
then	eval set -- a $mycmd
	shift
	"$@" &
	killzap=$!
fi
eval MyExec sleep "$stop"
trapret=0
KillTrap
